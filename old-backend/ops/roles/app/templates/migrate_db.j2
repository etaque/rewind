#!/bin/bash
# {{ ansible_managed }}

# Check if already applied migrations are missing (redirect stderr to stdout
# and ignore initial stdout)

export FLYWAY_LOCATIONS="filesystem:$1"

ERROR_ON_ALREADY_APPLIED_MIGRATIONS="$(\
  {{ flyway_script }} validate \
    -ignoreIgnoredMigrations=true \
    -ignorePendingMigrations=true \
    2>&1 >/dev/null \
)"

if [ "$?" -ne 0 ]; then
  {{ flyway_script }} info

  echo "$ERROR_ON_ALREADY_APPLIED_MIGRATIONS"
  echo
  echo "Aborting."
  exit 1
fi

# Check if there are ignored migrations. Ignored migrations will become out of
# order if the migration is applied (ignore both stdout and stderr)

{{ flyway_script }} validate \
  -ignorePendingMigrations=true \
  >/dev/null 2>&1

if [ "$?" -ne 0 ]; then
  {{ flyway_script }} info

  echo "*Ignored* and *Pending* migrations will be applied. *Ignored* migrations will be applied out of order."
  echo

  while : ; do
    echo "Continue? [outOfOrder/abort]"
    read ANSWER
    [[ "$ANSWER" == "outOfOrder" || "$ANSWER" == "abort" ]] && break
  done

  if [ "$ANSWER" == "outOfOrder" ]; then
    {{ flyway_script }} -outOfOrder=true migrate || exit 1
    exit 0
  else
    echo "Aborting.";
    exit 1
  fi
fi

# Check if there are pending migrations (ignore both stdout and stderr)

{{ flyway_script }} validate >/dev/null 2>&1

if [ "$?" -ne 0 ]; then
  {{ flyway_script }} info

  echo "*Pending* migrations will be applied."

  echo "Continue? [Y/n]"
  read ANSWER

  if [ "$ANSWER" != "n" ]; then
    {{ flyway_script }} migrate || exit 1
    exit 0
  else
    echo "Aborting.";
    exit 1
  fi
fi

# At this point, there is no migration to apply

echo "There is no migration to apply."
