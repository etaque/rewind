#
# Backend env deployment for cloud server: Java, Nginx, PostgreSQL.
# 
# psycopg2 required by postgresql_db module:
# http://docs.ansible.com/ansible/latest/modules/postgresql_db_module.html

- name: Install package
  apt:
    name:
      - software-properties-common
      - acl
      - python3-psycopg2
      - postgresql
      - postgresql-contrib
      - postgis
      - nginx
      - openjdk-8-jre
      - unzip
      - htop
      - certbot
      - libeccodes-tools
    state: latest
    update_cache: yes
  become: true

- name: Check if user is lingered (see https://wiki.archlinux.org/index.php/Systemd/User)
  raw: loginctl show-user {{ ansible_user_id }} | grep --quiet Linger=yes
  register: linger_enabled
  ignore_errors: true

- name: Enable user lingering
  become: true
  raw: loginctl enable-linger {{ ansible_user_id }}
  when: linger_enabled.rc != 0

- name: Start PostgreSQL service
  become: true
  service: name=postgresql state=started enabled=yes

- name: Create PostgreSQL DB
  become: true
  become_user: postgres
  postgresql_db: name={{ db_name }}

- name: Create PostgreSQL user
  become: true
  become_user: postgres
  postgresql_user: db={{ db_name }} name={{ db_user }} password={{ db_password }} priv=ALL

- name: Create PostgreSQL extensions
  become: true
  become_user: postgres
  postgresql_ext: db={{ db_name }} name={{ item }}
  with_items:
    - uuid-ossp
    - postgis

- name: ensure user does not have unnecessary privilege
  become: true
  become_user: postgres
  postgresql_user: name={{ db_user }} role_attr_flags=NOSUPERUSER,NOCREATEDB

- name: ensure no other user can access the database
  become: true
  become_user: postgres
  postgresql_privs: db={{ db_name }} role=PUBLIC type=database priv=ALL state=absent

- name: Start Nginx service
  become: true
  service: name=nginx state=started enabled=yes

- name: Copy nginx configuration file
  become: true
  template:
    src:    vhost.j2
    dest:   /etc/nginx/sites-available/{{ app_name }}
  notify:
    reload nginx
  register: vhost_conf

- name: Activate nginx configuration
  become: true
  file:
    path:   /etc/nginx/sites-enabled/{{ app_name }}
    src:    /etc/nginx/sites-available/{{ app_name }}
    state:  link
  notify:
    reload nginx

- name: Ensure no default Nginx file exists
  become: true
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify:
    reload nginx

- name: Check if certbot is already there
  when: skip_ssl is undefined or not skip_ssl
  stat:
    path: /etc/letsencrypt/live/{{ hostname }}/fullchain.pem
  become: true
  register: cert_stats

- name: Setup certbot if needed
  shell: certbot --nginx --noninteractive --agree-tos --email {{ ssl_email }} -d {{ hostname }}
  become: true
  when: cert_stats.stat is defined and (not cert_stats.stat.exists or vhost_conf.changed)

- name: Otherwise, ensure certbot recipient is up to date
  shell: certbot update_account --email {{ ssl_email }} --no-eff-email
  become: true
  when: cert_stats.stat is defined and cert_stats.stat.exists

