#######################################
# Playbook to deploy backend
#######################################

- name: Create application dir
  file:
    path: "{{ app_dir }}/"
    state: directory

- name: Create bin dir
  file:
    path: "{{ bin_dir }}"
    state: directory

- name: Create releases dir
  file:
    path: "{{ app_dir }}/releases/"
    state: directory

- name: Create conf dir
  file:
    path: "{{ conf_dir }}"
    state: directory

- name: Upload app conf
  template:
    src: application.conf.j2
    dest: "{{ conf_dir }}/application.conf"

- name: Create logs dir
  file:
    path: "{{ logs_dir }}"
    state: directory

- name: Upload log conf for main
  vars:
    current_name: "main"
  template:
    src: logback.xml.j2
    dest: "{{ conf_dir }}/logback-main.xml"

- name: Upload log conf for alt
  vars:
    current_name: "alt"
  template:
    src: logback.xml.j2
    dest: "{{ conf_dir }}/logback-alt.xml"

- name: Install main service
  vars:
    current_name: "main"
    http_port: "{{ backend_main_port }}"
  template:
    src: service.j2
    dest: "/etc/systemd/system/{{ main_service_name }}.service"
  become: true
  register: main_service

- name: Enable main service
  systemd:
    name: "{{ main_service_name }}"
    daemon_reload: true
    enabled: true
  become: true
  when: main_service.changed

- name: Install alt service
  vars:
    current_name: "alt"
    http_port: "{{ backend_alt_port }}"
  template:
    src: service.j2
    dest: "/etc/systemd/system/{{ alt_service_name }}.service"
  become: true
  register: alt_service

- name: Enable alt service
  systemd:
    name: "{{ alt_service_name }}"
    daemon_reload: true
    enabled: true
  become: true
  when: alt_service.changed

- name: Upload extract script
  template:
    src: extract.j2
    dest: "{{ bin_dir }}/extract.sh"
    mode: u+x

- name: Upload deploy script
  template:
    src: deploy.j2
    dest: "{{ bin_dir }}/deploy.sh"
    mode: u+x

- name: Migrate the database schema
  template:
    src: migrate_db.j2
    dest: "{{ bin_dir }}/migrate_db.sh"
    mode: u+x

- name: Upload .pgpass
  template:
    src: pgpass.j2
    dest: "{{ ansible_env.HOME }}/.pgpass"
    mode: 0600

- name: Ensure Flyway path exists
  file:
    path: "{{ flyway_dir }}"
    state: directory

- name: Check if Flyway is already installed
  stat:
    path: "{{ flyway_script }}"
  register: flyway_script_stat

- name: Download and extract flyway
  unarchive:
    src: https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/{{ flyway_version }}/flyway-commandline-{{ flyway_version }}.zip
    remote_src: yes
    dest: "{{ flyway_dir }}"
  when: flyway_script_stat.stat.exists == False

- name: "Ensure Flyway script is executable"
  file:
    path: "{{ flyway_script }}"
    mode: "ugo+x"

- name: "Ensure Flyway symlink exist"
  file:
    src: "{{ flyway_script }}"
    dest: "{{ flyway_symlink }}"
    state: link

- name: "Ensure Flyway config file exists"
  template:
    src: "flyway.conf.j2"
    dest: "{{ flyway_config_file }}"
    mode: "u=rw,og=r"

- name: "Upload GRIB sync script"
  template:
    src: gribs_sync.j2
    dest: "{{ bin_dir }}/gribs_sync.sh"
    mode: u+x

- name: "Install GRIB sync job"
  cron:
    name: "GRIB sync"
    hour: "3"
    minute: "0"
    job: "{{ bin_dir }}/gribs_sync.sh && curl --retry 3 {{ shared_secrets.grib_storage.sync_healthcheck }}"

